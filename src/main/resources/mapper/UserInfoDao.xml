<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xinruiyun.platform.dao.user.UserInfoDao">
    <insert id="addUserInfo">
        insert into user_info(user_name,
            password,
            ua_name,
            founder,
            create_time,
            renewing,
            update_time,
            callback_url,
            notify_url,
            state,
            remarks)
        values
            (#{user.userName},#{user.password},#{user.uaName},
            #{user.founder},#{user.createTime},#{user.renewing},#{user.updateTime},
            #{user.callbackUrl},#{user.notifyUrl},#{user.state},#{user.remarks})
    </insert>

    <update id="updateUserInfo">
        update user_info set
        user_name=#{user.userName},
        password=#{user.password},
        ua_name=#{user.uaName},
        renewing=#{user.renewing},
        update_time=#{user.updateTime},
        callback_url=#{user.callbackUrl},
        notify_url=#{user.notifyUrl},
        state=#{user.state},
        remarks=#{user.remarks}
        where id = #{user.id}
    </update>

    <delete id="deleteUserById">
        delete from user_info where id=#{id}
    </delete>

    <delete id="deleteUserByUsername">
        delete from user_info where user_name=#{userName}
    </delete>

    <select id="queryAllUserInfo" resultType="com.xinruiyun.platform.entity.user.UserInfo">
        select * from user_info
    </select>

    <!-- 用户权限分配的分页查询
    <select id="findUserAndRole" resultType="com.sojson.permission.bo.UserRoleAllocationBo">
        select u.id,u.nickname,u.email,u.create_time,u.last_login_time,u.status ,group_concat(ur.name) roleNames,group_concat(ur.id)roleIds from
        user_info u
        left join u_user_role uur on uur.uid = u.id
        left join u_role ur on ur.id = uur.rid
        <where>
            <if test="findContent != null and findContent !='' " >
                and (
                LOWER(u.nickname) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
                LOWER(u.email) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
                )
            </if>
        </where>
        group by u.id
    </select>
-->
    <select id="queryRoleByUserId" resultType="com.xinruiyun.platform.dto.URole">
             select ur.id,ur.name,ur.type,uu.id userId from role ur
		left join u_user_role uur on uur.rid = ur.id
		left join (select id from user_info where id =#{id,jdbcType=BIGINT}) uu on uu.id = uur.uid
		where uu.id = uur.uid
		group by ur.id
    </select>

    <select id="queryUserById" resultType="com.xinruiyun.platform.entity.user.UserInfo">
        select * from user_info where id=#{id}
    </select>

    <select id="queryUserByUsername" resultType="com.xinruiyun.platform.entity.user.UserInfo">
        select * from user_info where user_name=#{userName}
    </select>

    <update id="updatePassword">
         update user_info set password=#{password} where user_name=#{userName}
    </update>

    <update id="updateState">
        update user_info set state=#{state} where id=#{id}
    </update>

    <sql id="userObject">
        select id,user_name,password,ua_name,user_jurisdiction,html,founder,
         create_time,
         renewing,
         update_time,
         callback_url,
         notify_url,
         state,
         remarks
    </sql>

    <select id="queryUserByPage" resultType="com.xinruiyun.platform.entity.user.UserInfo">
        <include refid="userObject"/>
        from user_info
        <if test="pq.operator != null and pq.operator != ''">
            where founder=#{pq.operator}
        </if>
        order by create_time desc limit #{pq.pageIndex},#{pq.pageSize}
    </select>

    <select id="queryAllCount" resultType="Long">
        select count(id) from user_info
        <if test="founder != null and founder != ''">
            where founder=#{founder}
        </if>
    </select>
</mapper>